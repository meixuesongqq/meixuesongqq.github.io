<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | My Note]]></title>
  <link href="http://meixuesongqq.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://meixuesongqq.github.io/"/>
  <updated>2015-05-04T23:27:50+08:00</updated>
  <id>http://meixuesongqq.github.io/</id>
  <author>
    <name><![CDATA[Jason]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ember笔记]]></title>
    <link href="http://meixuesongqq.github.io/blog/2015/05/02/emberbi-ji/"/>
    <updated>2015-05-02T10:18:49+08:00</updated>
    <id>http://meixuesongqq.github.io/blog/2015/05/02/emberbi-ji</id>
    <content type="html"><![CDATA[<p>Ember是一个JavaScript框架。近日参与了一个采用Ember构建组件的开发工作。此处记录学习Ember的笔记。</p>

<!--more-->


<h2>1. Getting Start</h2>

<h3>Installation</h3>

<p>注意不要使用sudo.</p>

<pre><code># install brew
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#install node
brew install node
brew install watchman
#install ember
npm install -g ember-cli
npm install -g phantomjs
</code></pre>

<h3>TESTING YOUR INSTALLATION</h3>

<p>建立一个简单应用验证安装是否成功：</p>

<pre><code>ember new my-app
cd my-app
ember server
</code></pre>

<h2>2. Concepts</h2>

<h3>2.1 Core Concepts</h3>

<h4>Templates</h4>

<p>用于UI，采用Handlebars templating language. Each template is backed by a model, Model变化时自动更新UI.</p>

<p>Templates可以包含:</p>

<ol>
<li>Expressions： </li>
<li>Outlets：包含其它Templates. You can put outlets into your template using the  helper.</li>
<li>Components, custom HTML elements that you can use to clean up repetitive templates or create reusable controls.</li>
</ol>


<h4>Router</h4>

<p>完成URL与Template的映射。</p>

<h4>Components</h4>

<p>可重用的组件，用JavaScript定义行为，Template定义UI。</p>

<h4>Models</h4>

<p>存储对象状态。</p>

<h4>Route</h4>

<p>用于告诉Template应该显示哪个Model。</p>

<h3>2.2 Naming Conventions</h3>

<h4>The Application</h4>

<ul>
<li>app/app.js</li>
<li>app/controllers/application.js</li>
<li>app/templates/application.hbs</li>
<li>&hellip;</li>
</ul>


<h4>Simple Routes</h4>

<p>每个Route都有一个Controller和一个Template. 当访问/favorites时，Ember.js将会查找以下类：</p>

<ul>
<li>app/routes/favorites.js</li>
<li>app/controllers/favorites.js</li>
<li>app/templates/favorites.hbs</li>
</ul>


<p>对于route:favorites，可以指定Model:</p>

<pre><code class="javascript">export default Ember.Route.extend({
  model: function() {
    // the model is an Array of all of the posts
    // fetched from this url
    return $.ajax('/a/service/url/where/posts/live');
  }
});
</code></pre>

<h4>DYNAMIC SEGMENTS</h4>

<p>指URL中包含参数。</p>

<pre><code class="javascript">export default Ember.Router.extend().map(function(){
  this.route('post', { path: '/posts/:post_id' });
});

//app/routes/post.js
export default Ember.Route.extend({
  model: function(params) {
    return $.ajax('/my-service/posts/' + params.post_id);
  },

  serialize: function(post) {
    return { post_id: Ember.get(post, 'id') };
  }
});
</code></pre>

<p>由于这种模式很常见，因此约定：</p>

<ul>
<li>If your dynamic segment ends in _id, the default model hook will convert the first part into a model class on the application&rsquo;s namespace (post looks for app/models/post.js). It will then call find on that class with the value of the dynamic segment.</li>
<li>The default behaviour of the serialize hook is to replace the route&rsquo;s dynamic segment with the value of the model object&rsquo;s id property.</li>
</ul>


<h4>ROUTE, CONTROLLER AND TEMPLATE DEFAULTS</h4>

<p>If you don&rsquo;t specify a route handler for the post route (app/routes/post.js), Ember.js will still render the app/templates/post.hbs template with the app&rsquo;s instance of app/controllers/post.js.</p>

<p>If you don&rsquo;t specify the controller (app/controllers/post.js), Ember will automatically make one for you based on the return value of the route&rsquo;s model hook. If the model is an Array, you get an ArrayController. Otherwise, you get an ObjectController.</p>

<p>If you don&rsquo;t specify a post template, Ember.js won&rsquo;t render anything!</p>

<h4>NESTING</h4>

<pre><code class="javascript">export default Ember.Router.extend().map(function(){
  this.route('posts', function() {    // the `posts` route
    this.route('favorites');          // the `posts.favorites` route
    this.route('post');               // the `posts.post` route
  });
});
</code></pre>

<h4>THE INDEX ROUTE</h4>

<p>At every level of nesting (including the top level), Ember.js automatically provides a route for the / path named index.</p>

<pre><code class="javascript">export default Ember.Router.extend().map(function(){
  this.route('index', { path: '/' });  //可以省略，默认自带
  this.route('favorites');
});
</code></pre>

<h2>3. The Object Model</h2>

<h3>3.1 Classes and Instances</h3>

<pre><code class="javascript">Person = Ember.Object.extend({
  say: function(thing) {
    var name = this.get('name');
    alert(name + " says: " + thing);
  }
});

Soldier = Person.extend({
  say: function(thing) {
    this._super(thing + ", sir!");
  }
});

var yehuda = Soldier.create({
  name: "Yehuda Katz"
});

yehuda.say("Yes"); // alerts "Yehuda Katz says: Yes, sir!"
</code></pre>

<blockquote><p>For performance reasons, note that you cannot redefine an instance&rsquo;s computed properties or methods when calling create(), nor can you define new ones. You should only set simple properties when calling create().</p></blockquote>

<p>init方法会在对象创建时自动调用，因此可用于初始化一些设置。如果是继承自框架类，如Ember.View or Ember.ArrayController,一定要在init中调用this._super()：</p>

<pre><code class="javascript">Person = Ember.Object.extend({
  init: function() {
    var name = this.get('name');
    alert(name + ", reporting for duty!");
  }
});
</code></pre>

<h3>3.2 COMPUTED PROPERTIES</h3>

<pre><code class="javascript">Person = Ember.Object.extend({
  // these will be supplied by `create`
  firstName: null,
  lastName: null,

  fullName: function() {
    return this.get('firstName') + ' ' + this.get('lastName');
  }.property('firstName', 'lastName')
  //property方法用于指定依赖的属性, Ember扩展了function prototype。
});

var ironMan = Person.create({
  firstName: "Tony",
  lastName:  "Stark"
});

ironMan.get('fullName'); // "Tony Stark"
</code></pre>

<p>如果 <a href="http://guides.emberjs.com/v1.11.0/configuring-ember/disabling-prototype-extensions/">disabling prototype extensions guide</a>，可以改成：</p>

<pre><code class="javascript">fullName: Ember.computed('firstName', 'lastName', function() {
    return this.get('firstName') + ' ' + this.get('lastName');
  })
</code></pre>

<p><strong>CHAINING COMPUTED PROPERTIES</strong>，计算字段可以再依赖计算字段。</p>

<pre><code class="javascript">  fullName: function() {
    return this.get('firstName') + ' ' + this.get('lastName');
  }.property('firstName', 'lastName'),

  description: function() {
    return this.get('fullName') + '; Age: ' + this.get('age') + 
        '; Country: ' + this.get('country');
  }.property('fullName', 'age', 'country')
</code></pre>

<p>任何计算字段的依赖项发生变化时，都会自动触发计算字段重新计算。</p>

<p><strong>SETTING COMPUTED PROPERTIES</strong></p>

<pre><code class="javascript">Person = Ember.Object.extend({
  firstName: null,
  lastName: null,

  fullName: function(key, value, previousValue) {
    // setter
    if (arguments.length &gt; 1) {
      var nameParts = value.split(/\s+/);
      this.set('firstName', nameParts[0]);
      this.set('lastName',  nameParts[1]);
    }

    // getter
    return this.get('firstName') + ' ' + this.get('lastName');
  }.property('firstName', 'lastName')
});


var captainAmerica = Person.create();
captainAmerica.set('fullName', "William Burnside");
captainAmerica.get('firstName'); // William
captainAmerica.get('lastName'); // Burnside
</code></pre>

<h3>3.3 COMPUTED PROPERTIES AND AGGREGATE DATA WITH @EACH</h3>

<p><code>@each</code>instructs Ember.js to update bindings and fire observers for this computed property. 下面的例子中，当isDone属性、数组元素数量发生变化、todos换成另一个数组时，都会触发更新。</p>

<pre><code>export default Ember.Controller.extend({
  todos: [
    Ember.Object.create({ isDone: true }),
    Ember.Object.create({ isDone: false }),
    Ember.Object.create({ isDone: true })
  ],

  remaining: function() {
    var todos = this.get('todos');
    return todos.filterBy('isDone', false).get('length');
  }.property('todos.@each.isDone')
});
</code></pre>

<h3>3.4 Observers</h3>

<p>参考：<a href="http://guides.emberjs.com/v1.11.0/">Ember Guide</a></p>
]]></content>
  </entry>
  
</feed>
